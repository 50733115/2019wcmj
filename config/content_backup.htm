<h1>☆網際內容管理★</h1>
<p><img alt="" height="391" src="/images/1234.png" width="453"/></p>
<h4><span>網際內容管理</span></h4>
<h5><strong>2019 Spring 課程目標</strong></h5>
<h5>讓學員得以利用全球資訊網發表與 (精密) 機械 (設計) 相關的內容, 並進行有效管理.</h5>
<h5><br/><span>內容發表: Google Blogger, Github Pages</span><br/><br/><span>有效管理: 透過 API 程式整合兩者之間的內容, 包括 CMSimfly, Reveal 與 Pelican Blog 與 Blogger</span></h5>
<h1>介紹</h1>
<h2>git add</h2>
<h4><span>可以用來新增一個檔案, 數個檔案, 或在之前提交後所新增的所有內容.</span></h4>
<h4><span>在 GIT 架構下, 是對所新增或修改的內容拍快照。<br/><br/></span></h4>
<h2>git commit</h2>
<h4><span>執行之前, 必須使用 git config 建立臨時或永久的身分註記, 因為 GIT 在展開所有改版內容時, 必須明確登錄這些變更的作者與時間.<br/><span>當使用者採用 git commit -m "改版說明訊息", 此次提交到 .git 目錄下的更動內容, 均會綁定使用者身分與改版所輸入的說明訊息.</span><br/></span></h4>
<h2>git push</h2>
<h4><span><span>在隨後沒有輸入遠端 URL 代號時, 表示要推送到 origin, 若透過 git remote add 設定其他代號與 URL 對應時, git push 加上代號, 就可以將此次的提交內容, 推送到指定的 URL 所在遠端倉儲.</span></span></h4>
<p></p>
<h1>網路連線設定</h1>
<p><span>了解機械設計系電腦輔助設計室電腦的網路設定, 其中包括 IPv4 網路與 IPv6 網路設定.</span><span>正常情況下, 電腦輔助設計室中的 64 台電腦透過 IPv4 協定下的 DHCP 與 NAT 上網, 各電腦以 DHCP client 取得 192.168.1.* 的網路位址, 然後以 NAT 的一組外部 IP 上網, 通常必須設定 Proxy Server 為 http://proxy.kmol.info:3128 後上網會比較順暢, 但若 8 台 Proxy Servers 無法正常運作時, 則取消 Proxy Server 的設定.<br/><br/><span>瀏覽器代理主機設定</span><br/><br/><span>了解如何設定 Google Chrome 與 Firefox 瀏覽器的代理主機設定.</span><br/></span></p>
<p><span><span>可以利用"命令提示字元"輸入<b>ipconfig"</b>它的主要功用，包括用來顯示現時網路連線的設定（/all參數），或透過/release參數來釋放取得的ip位置，和透過/renew 來重新獲取ip位置的分配。</span></span></p>
<p><span><span><img alt="" height="216" src="/images/chrome_btm9ZrdFdm.png" width="400"/></span></span></p>
<p><br/><br/><img alt="" height="321" src="/images/explorer_UITFw7HX7h.png" width="600"/></p>
<h2>IP位址</h2>
<p><span>（IP Address）每一台電腦都必需要有唯一的IP位址（例如：74.125.153.104為google台灣的網址）才能上網。如果使用錯誤的IP位址，則可能會導致無法連線，也可能造成別的電腦無法連線。所以，IP位址一定要經過申請的程序取得合法且唯一的位址。</span></p>
<p><span><img alt="" height="218" src="/images/cmd_0RUZxKd4B8.png" width="436"/></span></p>
<h2>DNS伺服器</h2>
<p><span>（DNS Server）：所謂的DNS (Domain Name System網域名稱系統)簡單的說就是把網域名稱翻譯成IP位址(也可以逆向操作)，例如：將<a href="http://www.google.com.tw/" target="_blank">www.google.com.tw</a><span><span> </span>的網址翻譯成IP為74.125.153.104，因為網域名稱是用英文組成，會讓人容易記憶，但是IP位址一串毫無意義的數字，非常不容易記憶。</span></span></p>
<p><span><span><img alt="" height="518" src="/images/dllhost_WX2S1uVwDX.png" width="465"/></span></span></p>
<h2>chrome proxy</h2>
<p><img alt="" height="519" src="/images/rundll32_w9vJQp0NqB.png" width="800"/></p>
<p>proxy位置:140.130.17.3 連接阜:3128</p>
<p><span><span></span></span></p>
<h1>配置可攜程式環境</h1>
<p><span>取得 Windows 10 64 位元環境下的可攜程式環境 (下載  2019_cdb_w5.7z), 下載後解開目錄, 放入 USB3.0 規格以上的隨身碟或隨身硬碟.</span><br/><br/><span>以滑鼠點擊 start.bat 開啟可攜隨身系統, 以 stop.bat 關閉可攜隨身系統, <strong>隨身碟必須在關閉所有應用程式執行下, 才可正常退出.</strong></span><br/><br/><span>了解基本的 DOS (Disk Operating System) 指令</span><br/><br/><span>C:\&gt; 符號為 DOS 命令列視窗的回應 , 表示目前在 C 槽硬碟的 \ 根目錄, 若要切換到 Y 槽, 則在電腦的回應後, 輸入 Y:, 命令列將轉為</span><span>Y:\&gt;</span><br/><br/><span>若要<strong>更換目錄</strong>, 則使用<strong> cd</strong>,例如:<strong> </strong></span><strong>Y:\&gt;cd tmp</strong><br/><br/><span>表示要從 Y 槽的根目錄更換到 tmp 目錄, 也就是 </span><span>Y:\tmp&gt;</span><br/><br/><span>若要再回到 Y 槽的根目錄, 可以使用 cd ..</span><br/><br/><span>表示要從目前所在目錄, 往上跳回一個目錄, 也就是重新回到 Y 槽的根目錄.</span><br/><br/><span>另外, 無論目前位於哪一個子目錄, 也可以使用 cd \</span><br/><br/><span>直接回到根目錄.</span><br/><br/><span>或者從<strong> Y:\&gt; 直接使用</strong></span><br/><br/><strong>cd \tmp\repo\ssh\wcm2019</strong><br/><br/><span>直接從 Y 槽的根目錄, 跳進 Y:\tmp\repo\ssh\wcm2019&gt;</span><br/><br/><span>此外, 常用的 DOS 指令有:</span><br/><br/><span><strong>dir</strong> - 列出目前所在目錄的內容</span><br/><br/><span><strong>mkdir</strong> - 隨後加上要建立目錄的名稱, 可以建立目錄</span></p>
<p><span><strong>cls</strong> -清除目前的命令列顯示的內容</span></p>
<p><span><span></span></span></p>
<h1>倉儲改版</h1>
<p><br/>建立 Git 倉儲, 並 clone 倉儲至近端工作後, 對遠端倉儲改版<br/><br/>可攜程式系統中已經內建 git, 可以在啟動 start.bat 後, 透過 path 的設定, 直接執行 git 指令.<br/><br/>建立 Git 倉儲, 共分為兩類, 一類是直接在 Github 網際介面下建立倉儲時, 要求建立 README.md 檔案, 之後可以直接在近端, 以 git clone 加上倉儲連線 URL, 將倉儲克隆一份到近端, 並以最新版本作為工作目錄, 使用者改版後, 可以直接透過 git add, commit 與 push 對遠端倉儲改版.<br/>另一類則是故意在 Github 網際介面下建立倉儲時, 不要建立任何檔案, 而是在近端自行利用 git 指令建立倉儲架構, 新增內容後, 以 git remote add 設法在近端倉儲中納入 origin URL 後, 將近端倉儲版本新增提交推送到遠端.</p>
<p>首先先輸入cd 2019wcmj 隨後再打python wsgi.py  複製https://127.0.0.1:9443/<img alt="" height="220" src="/images/cmd_8KBRwvRBy9.png" width="421"/></p>
<p>進到網頁登錄密碼:admin後便可以開始進行改版</p>
<p><img alt="" height="261" src="/images/chrome_loiyqNFP8r.png" width="415"/></p>
<p>改版完成後再透過git  add . git commit -m"" git push</p>
<p></p>
<p><br/>指令解釋<br/><br/><strong><span style="background-color: #ff0000;">git add</span></strong><br/> 可以用來新增一個檔案, 數個檔案, 或在之前提交後所新增的所有內容.<br/>git add 在 GIT 架構下, 是對所新增或修改的內容拍快照:<br/><br/><br/><strong><span style="background-color: #ff0000;">git commit </span></strong><br/> 執行之前, 必須使用 git config 建立臨時或永久的身分註記, 因為 GIT 在展開所有改版內容時, 必須明確登錄這些變更的作者與時間.<br/>當使用者採用 git commit -m "改版說明訊息", 此次提交到 .git 目錄下的更動內容, 均會綁定使用者身分與改版所輸入的說明訊息.<br/><br/><strong><span style="background-color: #ff0000;">git push</span></strong><br/> 在隨後沒有輸入遠端 URL 代號時, 表示要推送到 origin, 若透過 git remote add 設定其他代號與 URL 對應時, git push 加上代號, 就可以將此次的提交內容, 推送到指定的 URL 所在遠端倉儲.  </p>
<p>利用 CMSimfly (https://github.com/chiamingyen/cmsimfly) 內容, 建立自己的 Github Pages 網站</p>
<h1>第一個 圖片</h1>
<p>學習如何一次上傳多個圖檔, 並且學會如何引用, 並且設定圖片大小.</p>
<p><img alt="" height="450" src="/images/w5.png" width="800"/></p>
<p><span>開啟已下載完成的cd2019_cdb_w5資料夾並啟動</span><br/><span>輸入cd tmp</span><br/><span>cd 2019wcmj</span><br/><span>python wsgi.py</span><br/><span>複製網址並開啟即可進入自己的CMSimfly管理網頁</span><br/><span>登入密碼:admin即可登入並且進行編輯</span></p>
<p><span>上傳圖片後能調整自己照片的大小編輯完,透過git add . git commit -m"" git push完成改版</span></p>
<h1>第二個 骰子遊戲</h1>
<p></p>
<script>// <![CDATA[
var cwidth = 400;
    var cheight = 300;
    var dicex = 50;
    var dicey = 50;
    var dicewidth = 100;
    var diceheight = 100;
    var dotrad = 6;
    var ctx;
    var dx;
    var dy;
    var firstturn = true;
    var point;
function throwdice() {
    var sum;
    var ch = 1+Math.floor(Math.random()*6);
    sum = ch;
    dx = dicex;
    dy = dicey;
    drawface(ch);
    dx = dicex + 150;
    ch=1 + Math.floor(Math.random()*6);
    sum += ch;
    drawface(ch);
    if (firstturn) {
        switch(sum) {
            case 7:
            case 11:
              document.f.outcome.value="You win!";
              break;
            case 2:
            case 3:
            case 12:
              document.f.outcome.value="You lose!";
              break;
            default:
              point = sum;
              document.f.pv.value=point;
              firstturn = false;
              document.f.stage.value="Need follow-up throw.";
              document.f.outcome.value="   ";
        }
    }
    else {
        switch(sum) {
        case point:
           document.f.outcome.value="You win!";
           document.f.stage.value="Back to first throw.";
           document.f.pv.value=" ";
           firstturn = true;
           break;
        case 7:
           document.f.outcome.value="You lose!";
           document.f.stage.value="Back to first throw.";
           document.f.pv.value=" ";
           firstturn = true;
        }
            }
}
function drawface(n) {
  ctx = document.getElementById('canvas').getContext('2d');  
  ctx.lineWidth = 5;
  ctx.clearRect(dx,dy,dicewidth,diceheight);
  ctx.strokeRect(dx,dy,dicewidth,diceheight)
  var dotx;
  var doty;
  ctx.fillStyle = "#009966";
    switch(n) {
        case 1:
         draw1();
         break;
        case 2:
         draw2();
         break;
        case 3:
         draw2();
         draw1();
         break;
        case 4:
         draw4();
         break;
        case 5:
         draw4();
         draw1();
         break;
        case 6:
         draw4();
         draw2mid();
         break;
         
    }
}
function draw1() {
    var dotx;
    var doty;
    ctx.beginPath();
    dotx = dx + .5*dicewidth;
    doty = dy + .5*diceheight;
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    ctx.closePath();
    ctx.fill();
}
function draw2() {
    var dotx;
    var doty;
    ctx.beginPath();
    dotx = dx + 3*dotrad;
    doty = dy + 3*dotrad;
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    dotx = dx+dicewidth-3*dotrad;
    doty = dy+diceheight-3*dotrad;
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    ctx.closePath();
    ctx.fill();
}
function draw4() {
    var dotx;
    var doty;
    ctx.beginPath();
    dotx = dx + 3*dotrad;
    doty = dy + 3*dotrad;
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    dotx = dx+dicewidth-3*dotrad;
    doty = dy+diceheight-3*dotrad;
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    ctx.closePath();
    ctx.fill();
    ctx.beginPath();
    dotx = dx + 3*dotrad;
    doty = dy + diceheight-3*dotrad;  //no change
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    dotx = dx+dicewidth-3*dotrad;
    doty = dy+ 3*dotrad;
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    ctx.closePath();
    ctx.fill(); 
}
function draw2mid() {
    var dotx;
    var doty;
    ctx.beginPath();
    dotx = dx + 3*dotrad;
    doty = dy + .5*diceheight;
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    dotx = dx+dicewidth-3*dotrad;
    doty = dy + .5*diceheight; //no change
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    ctx.closePath();
    ctx.fill();
}
// ]]></script>
<p><canvas height="300" id="canvas" width="400"> Your browser doesn't support the HTML5 element canvas. </canvas> <br/> <button onclick="throwdice();">Throw dice </button></p>
<form id="f" name="f">Stage: <input name="stage" type="text" value="First Throw"/> Point: <input name="pv" type="text" value="   "/> Outcome: <input name="outcome" type="text" value="     "/></form>
<h1>第三個 亂數系統</h1>
<p></p>
<p>網路與電腦程式只是工具, 任何人希望與遠端的系統或成員溝通, 可以使用網路.</p>
<p>任何人想要利用電腦的能力解決問題, 就必須學會編寫電腦程式, 與電腦溝通.</p>
<p><button onclick="myFunction()">Try it</button></p>
<p id="demo"></p>
<script>// <![CDATA[
function myFunction() {
  document.getElementById("demo").innerHTML = Math.floor(Math.random()*10);
}
// ]]></script>
<!-- 導入 Brython 標準程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p></p>
<!-- 啟動 Brython -->
<p>
<script>// <![CDATA[
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
// ]]></script>
</p>
<p><canvas height="400" id="plotarea" width="600"></canvas></p>
<p>
<script type="text/python">// <![CDATA[
# 導入 doc
from browser import document as doc
import math

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
// ]]></script>
</p>
<p><br/>繪圖 &lt;&lt; <a href="/get_page/%E7%AC%AC%E5%9B%9B%E5%80%8BROC%E5%9C%8B%E6%97%97/繪圖.html">Previous</a> <a href="/get_page/%E7%AC%AC%E5%9B%9B%E5%80%8BROC%E5%9C%8B%E6%97%97/Spur Gears.html">Next</a> &gt;&gt; Spur Gears</p>
<!-- footer -->
<div class="container">
<div class="row pt-3 mx-auto">
<p><!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. --> Copyright ©
<script>// <![CDATA[
document.write(new Date().getFullYear());
// ]]></script>
All rights reserved | This template is made with <i aria-hidden="true" class="icon-heart"></i> by <a href="https://colorlib.com" target="_blank">Colorlib</a> <!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. --></p>
</div>
</div>
<!-- for footer -->
<p></p>
<!-- for site wrap -->
<p></p>
<!-- <script src="/static/chimper/js/jquery-3.3.1.min.js"></script> -->
<p>
<script src="/static/chimper/js/jquery-migrate-3.0.1.min.js"></script>
<script src="/static/chimper/js/jquery-ui.js"></script>
<script src="/static/chimper/js/popper.min.js"></script>
<script src="/static/chimper/js/bootstrap.min.js"></script>
<script src="/static/chimper/js/owl.carousel.min.js"></script>
<script src="/static/chimper/js/jquery.stellar.min.js"></script>
<script src="/static/chimper/js/jquery.countdown.min.js"></script>
<script src="/static/chimper/js/jquery.magnific-popup.min.js"></script>
<script src="/static/chimper/js/bootstrap-datepicker.min.js"></script>
<script src="/static/chimper/js/aos.js"></script>
</p>
<!--
            <script src="/static/chimper/js/typed.js"></script>
                    <script>
                    var typed = new Typed('.typed-words', {
                    strings: ["Web Apps"," WordPress"," Mobile Apps"],
                    typeSpeed: 80,
                    backSpeed: 80,
                    backDelay: 4000,
                    startDelay: 1000,
                    loop: true,
                    showCursor: true
                    });
                    </script>
            -->
<p>
<script src="/static/chimper/js/main.js"></script>
</p>
<h1>第四個ROC國旗</h1>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<p><img alt="" height="400" src="/images/下載.png" width="600"/></p>
<!-- 啟動 Brython -->
<script>// <![CDATA[
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
// ]]></script>
<p><canvas height="400" id="plotarea" width="600"></canvas></p>
<script type="text/python">// <![CDATA[
# 導入 doc
from browser import document as doc
import math

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
// ]]></script>
<p><br/>繪圖 &lt;&lt; <a href="/get_page/%E7%AC%AC%E5%9B%9B%E5%80%8BROC%E5%9C%8B%E6%97%97/繪圖.html">Previous</a> <a href="/get_page/%E7%AC%AC%E5%9B%9B%E5%80%8BROC%E5%9C%8B%E6%97%97/Spur Gears.html">Next</a> &gt;&gt; Spur Gears</p>
<!-- footer -->
<div class="container">
<div class="row pt-3 mx-auto">
<p><!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. --> Copyright ©
<script>// <![CDATA[
document.write(new Date().getFullYear());
// ]]></script>
All rights reserved | This template is made with <i aria-hidden="true" class="icon-heart"></i> by <a href="https://colorlib.com" target="_blank">Colorlib</a> <!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. --></p>
</div>
</div>
<!-- for footer -->
<p></p>
<!-- for site wrap -->
<p></p>
<!-- <script src="../cmsimde/static/chimper/js/jquery-3.3.1.min.js"></script> -->
<script src="/static/chimper/js/jquery-migrate-3.0.1.min.js"></script>
<script src="/static/chimper/js/jquery-ui.js"></script>
<script src="/static/chimper/js/popper.min.js"></script>
<script src="/static/chimper/js/bootstrap.min.js"></script>
<script src="/static/chimper/js/owl.carousel.min.js"></script>
<script src="/static/chimper/js/jquery.stellar.min.js"></script>
<script src="/static/chimper/js/jquery.countdown.min.js"></script>
<script src="/static/chimper/js/jquery.magnific-popup.min.js"></script>
<script src="/static/chimper/js/bootstrap-datepicker.min.js"></script>
<script src="/static/chimper/js/aos.js"></script>
<p>&lt;!--</p>
<script src="/static/chimper/js/typed.js"></script>
<script>// <![CDATA[
var typed = new Typed('.typed-words', {
                    strings: ["Web Apps"," WordPress"," Mobile Apps"],
                    typeSpeed: 80,
                    backSpeed: 80,
                    backDelay: 4000,
                    startDelay: 1000,
                    loop: true,
                    showCursor: true
                    });
// ]]></script><h1>期中報告影片</h1>
<p>介紹第一到八周網際內容管理所做的成果影片</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/FoWnv9dvsnQ" width="560"></iframe></p>
<p>第1-8周主要教學網站:網際內容管理網誌、2019 Spring網際內容管理</p>
<p>電腦初學者的網際內容管理(1-8周上課目標)</p>
<p>1.了解網路連線設定</p>
<p>2.下載可攜式環境(2019_cdb_w5.7z)</p>
<p>3.建立github倉儲，並理解改版時指令的用意(git add .、git commit -m ""、git push)</p>
<p>4.利用CMSimfly內容，建立自己的Github Pages網站</p>
<p>5.學習如何使用CMSimfly，在網站中加入內容，並進行改版</p>
<p>示範如何開啟網站<br/>開啟已下載完成的cd2019_cdb_w5資料夾並啟動<br/>輸入cd tmp<br/>cd 2019wcmj<br/>python wsgi.py<br/>複製網址並開啟即可進入自己的CMSimfly管理網頁<br/>登入密碼:admin即可登入並且進行編輯<br/>&lt;產生亂數1-51&gt;就是示範在網頁裡新增內容 透過輸入程式碼及文字可以新增內容<br>新增完內容後可點擊右上角選項generate_pages轉為靜態網頁</br></p>
<p>並且牢記每次經過新增內容後必須利用指令進行改版(git add .、git commit -m ""、git push)<br/>透過登入github可以看到自己的網頁過去改版新增的內容</p>